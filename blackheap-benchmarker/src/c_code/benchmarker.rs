/* automatically generated by rust-bindgen 0.69.2 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tuple {
    pub a: ::std::os::raw::c_int,
    pub b: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tuple() {
    const UNINIT: ::std::mem::MaybeUninit<tuple> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tuple>(),
        8usize,
        concat!("Size of: ", stringify!(tuple))
    );
    assert_eq!(
        ::std::mem::align_of::<tuple>(),
        4usize,
        concat!("Alignment of ", stringify!(tuple))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tuple), "::", stringify!(a))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(tuple), "::", stringify!(b))
    );
}
extern "C" {
    pub fn tuple_add(a: *const tuple, b: *const tuple) -> tuple;
}
extern "C" {
    pub fn inline_tuple_add(my: *mut tuple, other: *const tuple);
}
