/* automatically generated by rust-bindgen 0.70.1 */

pub const MEMINFO: &[u8; 14] = b"/proc/meminfo\0";
pub const DROP_PAGE_CACHE: &[u8; 25] = b"/proc/sys/vm/drop_caches\0";
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub const access_pattern_ACCESS_PATTERN_CONST: access_pattern = 0;
pub const access_pattern_ACCESS_PATTERN_SEQUENTIAL: access_pattern = 1;
pub const access_pattern_ACCESS_PATTERN_RANDOM: access_pattern = 2;
pub const access_pattern_ACCESS_PATTERN_REVERSE: access_pattern = 3;
pub type access_pattern = ::std::os::raw::c_uint;
pub const error_codes_ERROR_CODES_SUCCESS: error_codes = 0;
pub const error_codes_ERROR_CODES_MALLOC_FAILED: error_codes = 1;
pub const error_codes_ERROR_CODES_OPEN_FAILED: error_codes = 2;
pub const error_codes_ERROR_CODES_READ_FAILED: error_codes = 3;
pub const error_codes_ERROR_CODES_WRITE_FAILED: error_codes = 4;
pub const error_codes_ERROR_CODES_LSEEK_FAILED: error_codes = 5;
pub const error_codes_ERROR_CODES_FSYNC_FAILED: error_codes = 6;
pub const error_codes_ERROR_CODES_FSTAT_FAILED: error_codes = 7;
pub const error_codes_ERROR_CODES_DROP_PAGE_CACHE_FAILED_NO_PERMISSIONS: error_codes = 8;
pub const error_codes_ERROR_CODES_DROP_PAGE_CACHE_FAILED_OTHER: error_codes = 9;
pub const error_codes_ERROR_CODES_INCORRECT_FILE_BUFFER_SIZE: error_codes = 10;
pub const error_codes_ERROR_CODES_TOO_SMALL_FILE_BUFFER: error_codes = 11;
pub type error_codes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct benchmark_config {
    pub filepath: *const ::std::os::raw::c_char,
    pub memory_buffer_in_bytes: usize,
    pub file_size_in_bytes: usize,
    pub access_size_in_bytes: usize,
    pub number_of_io_op_tests: usize,
    pub access_pattern_in_memory: access_pattern,
    pub access_pattern_in_file: access_pattern,
    pub is_read_operation: bool,
    pub prepare_file_size: bool,
    pub drop_cache_first: bool,
    pub do_reread: bool,
    pub restrict_free_ram_to: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of benchmark_config"][::std::mem::size_of::<benchmark_config>() - 64usize];
    ["Alignment of benchmark_config"][::std::mem::align_of::<benchmark_config>() - 8usize];
    ["Offset of field: benchmark_config::filepath"]
        [::std::mem::offset_of!(benchmark_config, filepath) - 0usize];
    ["Offset of field: benchmark_config::memory_buffer_in_bytes"]
        [::std::mem::offset_of!(benchmark_config, memory_buffer_in_bytes) - 8usize];
    ["Offset of field: benchmark_config::file_size_in_bytes"]
        [::std::mem::offset_of!(benchmark_config, file_size_in_bytes) - 16usize];
    ["Offset of field: benchmark_config::access_size_in_bytes"]
        [::std::mem::offset_of!(benchmark_config, access_size_in_bytes) - 24usize];
    ["Offset of field: benchmark_config::number_of_io_op_tests"]
        [::std::mem::offset_of!(benchmark_config, number_of_io_op_tests) - 32usize];
    ["Offset of field: benchmark_config::access_pattern_in_memory"]
        [::std::mem::offset_of!(benchmark_config, access_pattern_in_memory) - 40usize];
    ["Offset of field: benchmark_config::access_pattern_in_file"]
        [::std::mem::offset_of!(benchmark_config, access_pattern_in_file) - 44usize];
    ["Offset of field: benchmark_config::is_read_operation"]
        [::std::mem::offset_of!(benchmark_config, is_read_operation) - 48usize];
    ["Offset of field: benchmark_config::prepare_file_size"]
        [::std::mem::offset_of!(benchmark_config, prepare_file_size) - 49usize];
    ["Offset of field: benchmark_config::drop_cache_first"]
        [::std::mem::offset_of!(benchmark_config, drop_cache_first) - 50usize];
    ["Offset of field: benchmark_config::do_reread"]
        [::std::mem::offset_of!(benchmark_config, do_reread) - 51usize];
    ["Offset of field: benchmark_config::restrict_free_ram_to"]
        [::std::mem::offset_of!(benchmark_config, restrict_free_ram_to) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct benchmark_results {
    pub res: error_codes,
    pub length: usize,
    pub durations: *mut f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of benchmark_results"][::std::mem::size_of::<benchmark_results>() - 24usize];
    ["Alignment of benchmark_results"][::std::mem::align_of::<benchmark_results>() - 8usize];
    ["Offset of field: benchmark_results::res"]
        [::std::mem::offset_of!(benchmark_results, res) - 0usize];
    ["Offset of field: benchmark_results::length"]
        [::std::mem::offset_of!(benchmark_results, length) - 8usize];
    ["Offset of field: benchmark_results::durations"]
        [::std::mem::offset_of!(benchmark_results, durations) - 16usize];
};
extern "C" {
    pub fn benchmark_file(config: *const benchmark_config) -> benchmark_results;
}
